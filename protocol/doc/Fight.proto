package com.randioo.doudizhu_server.protocol;

import "Entity.proto";

message FightReadyRequest{
}

message FightReadyResponse{
	optional int32 errorCode = 1[default = 1];
}

message SCFightReady{
	optional int32 seated = 1;
	optional bool isFirst = 2;
}



message SCFightMingPai{
	optional int32 seated = 1;
	repeated int32 pai = 2;	
	optional int32 sex = 3;
	optional int32 isFirst = 4 ; //是否是第一次，0是第一次，1不是
}
message FightMingPaiRequest{
    optional bool isMingPai =1 ; //是否明牌
}
message FightMingPaiResponse{
	optional int32 errorCode = 1 [default = 1];
}



message FightGetlastRoundRequest{
}
message FightGetlastRoundResponse{
	optional int32 errorCode = 1 [default = 1];
	repeated Record records = 2;
}



message FightRejoinRequest{
}
message FightRejoinResponse{
	optional int32 errorCode = 1 [default = 1];
	repeated int32 pai = 2;
	repeated int32 landLordPai = 3;
	optional string roomId = 4;
	optional bool moguai = 5;
	optional int32 seated = 6;
	repeated gameRolePlayData rolePlayData = 7;
	optional bool getLastRound = 8;
	repeated Record records = 9;
	optional string gameId = 10;
	optional int32 times = 11;
	optional int32 gameState = 12;
	optional int32 gameType = 13;
	optional bool landlordCalling = 14;
	optional bool mingpai = 15;
	optional RoundVideoData roundVideoData = 16 ; //重连所需的sc
}
message SCFightRejoin{
	optional int32 seated = 1;
}
message SCFightFinishRejoin{
}

message FightRecommandRequest{
}
message FightRecommandResponse{
	optional int32 errorCode = 1 [default = 1];
	repeated RecommandPai recommandPai = 2;
}

message SCFightStart{
	repeated int32 pai = 1;
	optional bool moguai = 2;
	repeated PaiNum PaiNum = 3; 
	optional int32 roundNum = 4;
	
}

//通知叫的档数
message SCFightCallScore{
	optional int32 score = 1; //叫的档数
	optional int32 seat = 2 ; //位置
	optional int32 currentScore = 3; //当前档数
}

message SCFightRoundOver{
	optional int32 dang = 1;
	optional int32 bomb = 2;
	optional bool spring = 3;
	optional bool moguai = 4;
	optional bool mingpai = 5;
	repeated Score score = 6;
	optional bool over = 7;
	optional int32 all = 8;
}
message SCFightGameOver{	
	repeated GameOverData gameOverData = 1;
}
message FightCallLandLordRequest{
	optional int32 fen = 1;
}
message FightCallLandLordResponse{
	optional int32 errorCode = 1 [default = 1];
}
//通知叫地主
message SCFightCallLandLord{
	optional int32 seated = 1;
	optional int32 countdown = 2;
	optional int32 currentScore = 3; //当前场上分数
	optional int32 score = 4;
}

message SCFightPutOut{
	optional int32 seated = 1;
	optional int32 countdown = 2;
	optional bool allowGuo = 3;	
}
message SCFightPutOutPai{
	optional int32 seated = 1;
	repeated int32 putOutPai = 2;
	repeated PaiNum PaiNum = 3;	
	optional string type = 4;
}

message FightSendCardRequest{
	repeated int32 pai = 1;	
}

message FightSendCardResponse{
	optional int32 errorCode = 1 [default = 1];
}

message SCFightLandLord{
	repeated int32 pai = 1;
	repeated int32 landLordPai = 2;
	optional int32 seated = 3;
}

message FightExitGameRequest{
	
}

message FightExitGameResponse{
	optional int32 errorCode = 1 [default = 1];
}

message SCFightExitGame{
	optional int32 seated = 1;
}

message FightApplyExitGameRequest{
	
}

message FightApplyExitGameResponse{
	optional int32 errorCode = 1[default = 1];
}

message SCFightApplyExitGame{
	optional string name = 1;//申请退出的玩家名
	optional int32 applyExitId = 2;//该次申请的id
	optional int32 countDown = 3;//倒计时
}

message FightAgreeExitGameRequest{
	optional FightVoteApplyExit fightVoteApplyExit = 1;
	optional int32 applyExitId = 2;//申请的id
}

message FightAgreeExitGameResponse{
	optional int32 errorCode = 1 [default = 1];
}

message SCFightGameDismiss{
	
}

message SCFightLoadResource{
	
}
message SCFightLastRoundReady{
}
message SCFightDisconnect{
	optional int32 seated = 1;
}
message SCFightApplyExitResult{
	repeated string rejectName = 1;
	repeated string agreeName = 2;
}
message FightAutoRequest{
}
message FightAutoResponse{
	optional int32 errorCode = 1 [default = 1];
}
message SCFightAuto{
	optional int32 seated = 1;
	optional bool auto = 2;
}

message FightBackMenuRequest{
	
}

message FightBackMenuResponse{
	
}
message SCFightCurrentScore{
    optional int32 seated =1 ; //位置
    optional int32 currentScore = 2; //积分 
}
message FightGameInfoRequest{
	optional string lockString = 1 ; //房间号
}

message FightGameInfoResponse{
	optional int32 errorCode = 1 [default = 1];
	repeated RoleInfo roleInfo = 2 ; //房间中玩家信息
}

//明牌按钮显示
message SCFightMingPaiShow{

}

message SCFightSpring{
	optional bool isSpring = 1; //true 春天
}
//报道按钮显示
message SCFightReportShow{
	repeated Cards cards = 1; //报道牌的列表
}

//报道
message SCFightReport{
	optional int32 seat = 1;//选择报道的座位
	repeated Cards cards = 2; //报道牌的列表
}

//按钮关闭
message SCFightButtonDisappear{
	
}
//请求报道
message FightReportRequest{
    optional bool isReport =1 ; //是否报道
}
message FightReportResponse{
	optional int32 errorCode = 1 [default = 1];
}
//报道后 是否打本局按钮显示
message SCFightPlayReportShow{

}
//报道后 是否打本局通知
message SCFightPlayReport{
   optional bool isPlay = 1 ; //true 为打本局
   optional int32 seat = 2 ;//位置
}
//报道后 是否打本局请求
message FightPlayReportRequest{
   optional bool isPlay = 1 ; //是否打
}
//报道后 是否打本局
message FightPlayReportResponse{
   optional int32 errorCode = 1 [default = 1];
}